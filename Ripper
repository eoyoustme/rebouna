--====== Load spawner ======--
local spawner = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Doors/Entity%20Spawner/V2/Source.lua"))()

local entity = spawner.Create({
    Entity = {
        Name = "Ripper",
        Asset = "rbxassetid://118750853123155",
        HeightOffset = 0
    },
    Lights = {
        Flicker = { Enabled = false, Duration = 1 },
        Shatter = true,
        Repair = false
    },
    Earthquake = { Enabled = true },
    CameraShake = {
        Enabled = true,
        Range = 100,
        Values = {1.5, 20, 0.1, 1}
    },
    Movement = { Speed = 185, Delay = 5, Reversed = false },
    Rebounding = { Enabled = false },
    Damage = { Enabled = false, Range = 40, Amount = 5 },
    Crucifixion = { Enabled = true, Range = 40, Resist = false, Break = true },
    Death = {
        Type = "Guiding",
        Hints = {"You die to Ripper", "HE is crazy", "IF you see room to red and hear a scream", "Hide now he is move"},
        Cause = ""
    }
})

--====== Services ======--
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

--====== Jumpscare Setup ======--
local canJumpscare = false
local isJumpscare = false
local entityModel, entityPart
local cameraConn, inputConn1, inputConn2

--====== Callbacks ======--
entity:SetCallback("OnSpawned", function()
    print("Entity has spawned")

    local spawnSound = Instance.new("Sound", workspace)
    spawnSound.SoundId = "rbxassetid://9125713501"
    spawnSound.Volume = 9999
    spawnSound.PlaybackSpeed = 0.525
    spawnSound:Play()

    local lighting = game:GetService("Lighting")
    lighting.MainColorCorrection.TintColor = Color3.fromRGB(255, 255, 255)
    lighting.MainColorCorrection.Contrast = 10
    TweenService:Create(lighting.MainColorCorrection, TweenInfo.new(2.5), {Contrast = 0}):Play()
    TweenService:Create(lighting.MainColorCorrection, TweenInfo.new(5), {TintColor = Color3.fromRGB(250, 0, 0)}):Play()

    -- Setup jumpscare detection
    entityModel = entity.Model
    entityPart = entityModel and (entityModel.PrimaryPart or entityModel:FindFirstChildWhichIsA("BasePart"))
    canJumpscare = entityPart ~= nil
end)

entity:SetCallback("OnStartMoving", function() print("Entity has started moving") end)
entity:SetCallback("OnEnterRoom", function(room, firstTime)
    print(("Entity entered room: %s (%s)"):format(room.Name, firstTime and "firstTime" or "again"))
end)
entity:SetCallback("OnLookAt", function(los)
    print(los and "Player is looking at entity" or "View obstructed")
end)
entity:SetCallback("OnRebounding", function(start)
    print(start and "Rebounding started" or "Rebounding ended")
end)
entity:SetCallback("OnDespawning", function() print("Entity is despawning") end)
entity:SetCallback("OnDespawned", function()
    print("Entity has despawned")

    local despawnSound = Instance.new("Sound", workspace)
    despawnSound.SoundId = "rbxassetid://1837829565"
    despawnSound.Volume = 9999
    despawnSound:Play()

    task.wait(3)

    local lighting = game:GetService("Lighting")
    lighting.MainColorCorrection.TintColor = Color3.fromRGB(250, 0, 0)
    lighting.MainColorCorrection.Contrast = 10
    TweenService:Create(lighting.MainColorCorrection, TweenInfo.new(2.5), {Contrast = 0}):Play()
    TweenService:Create(lighting.MainColorCorrection, TweenInfo.new(5), {TintColor = Color3.fromRGB(255, 255, 255)}):Play()
end)
entity:SetCallback("OnDamagePlayer", function(newHealth)
    print(newHealth == 0 and "Entity killed the player" or "Entity damaged the player")
end)

--====== Jumpscare Logic ======--
local function doJumpscare()
    isJumpscare = true
    camera.CameraType = Enum.CameraType.Scriptable

    cameraConn = RunService.RenderStepped:Connect(function()
        if player.Character and player.Character:FindFirstChild("Head") and entityPart then
            camera.CFrame = CFrame.new(player.Character.Head.Position, entityPart.Position)
        end
    end)

    task.spawn(function()
        local char = player.Character
        if char then
            local hum = char:FindFirstChild("Humanoid")
            if hum then
                hum.WalkSpeed = 0
                hum.JumpPower = 0
                hum.AutoRotate = false
                hum.PlatformStand = true
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Anchored = true
                    end
                end
            end
        end
    end)

    inputConn1 = UIS.InputBegan:Connect(function() if isJumpscare then return Enum.ContextActionResult.Sink end end)
    inputConn2 = UIS.InputChanged:Connect(function() if isJumpscare then return Enum.ContextActionResult.Sink end end)

    local gui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
    gui.Name = "JumpscareGUI"
    local img = Instance.new("ImageLabel", gui)
    img.Size = UDim2.new(1, 0, 1, 0)
    img.BackgroundTransparency = 1
    img.ImageTransparency = 1
    img.Image = "rbxassetid://14865476959"

    TweenService:Create(img, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()

    local sound = Instance.new("Sound", workspace)
    sound.SoundId = "rbxassetid://6567183465"
    sound.Volume = 3
    sound:Play()

    task.wait(1.2)

    local hum = player.Character and player.Character:FindFirstChild("Humanoid")
    if hum then hum.Health = 0 end

    local fade = TweenService:Create(img, TweenInfo.new(0.5), {ImageTransparency = 1})
    fade:Play()
    fade.Completed:Wait()

    -- Cleanup
    if cameraConn then cameraConn:Disconnect() end
    if inputConn1 then inputConn1:Disconnect() end
    if inputConn2 then inputConn2:Disconnect() end
    camera.CameraType = Enum.CameraType.Custom
    isJumpscare = false
    gui:Destroy()
end

--====== Start Entity ======--
entity:Run()

--====== Heartbeat Jumpscare Trigger ======--
RunService.Heartbeat:Connect(function()
    if not canJumpscare or isJumpscare then return end
    if not player.Character or not entityPart then return end

    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local dist = (hrp.Position - entityPart.Position).Magnitude
    if dist <= entity.Config.Damage.Range then
        -- Use RaycastParams to check if view is clear
        local rayParams = RaycastParams.new()
        rayParams.FilterType = Enum.RaycastFilterType.Blacklist
        rayParams.FilterDescendantsInstances = {player.Character}

        local direction = (entityPart.Position - hrp.Position).Unit * dist
        local result = workspace:Raycast(hrp.Position, direction, rayParams)

        if not result or result.Instance:IsDescendantOf(entityModel) then
            doJumpscare()
        end
    end
end)
