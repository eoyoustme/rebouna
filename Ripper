--====== Load spawner ======--
local spawner = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Doors/Entity%20Spawner/V2/Source.lua"))()

local entity = spawner.Create({
    Entity = {
        Name = "Ripper",
        Asset = "rbxassetid://118750853123155",
        HeightOffset = 0
    },
    Lights = {
        Flicker = { Enabled = false, Duration = 1 },
        Shatter = true,
        Repair = false
    },
    Earthquake = { Enabled = true },
    CameraShake = {
        Enabled = true,
        Range = 100,
        Values = {1.5, 20, 0.1, 1}
    },
    -- *** IMPORTANT: Initial Movement Speed for normal behavior ***
    Movement = { Speed = 185, Delay = 5, Reversed = false }, -- Default normal speed
    Rebounding = { Enabled = false },
    Damage = { Enabled = true, Range = 40, Amount = 125 },
    Crucifixion = { Enabled = true, Range = 40, Resist = false, Break = true },
    Death = {
        Type = "Guiding",
        Hints = {"You die to Ripper", "HE is crazy", "IF you see room to red and hear a scream", "Hide now he is move"},
        Cause = ""
    }
})

--====== Services ======--
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting") -- Get Lighting service

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

--====== Jumpscare Setup ======--
local isJumpscareActive = false 
local entityModel, entityPart -- entityPart will be used for camera lock and anchoring
local cameraConn, inputConn1, inputConn2
local healthChangedConn 
local originalTintColor = Lighting.MainColorCorrection.TintColor
local originalContrast = Lighting.MainColorCorrection.Contrast

-- CONNECTION TO CONTINUOUSLY ANCHOR ENTITY DURING JUMPSCARE
local anchorConn = nil

-- Store original movement speed
local originalMovementSpeed = entity.Movement.Speed

--====== Callbacks ======--
entity:SetCallback("OnSpawned", function()
    print("Thực thể đã xuất hiện")

    local spawnSound = Instance.new("Sound", workspace)
    spawnSound.SoundId = "rbxassetid://9125713501"
    spawnSound.Volume = 9999
    spawnSound.PlaybackSpeed = 0.525
    spawnSound:Play()

    -- Save original room color state
    originalTintColor = Lighting.MainColorCorrection.TintColor
    originalContrast = Lighting.MainColorCorrection.Contrast

    -- Red effect on spawn
    Lighting.MainColorCorrection.TintColor = Color3.fromRGB(255, 255, 255)
    Lighting.MainColorCorrection.Contrast = 10
    TweenService:Create(Lighting.MainColorCorrection, TweenInfo.new(2.5), {Contrast = 0}):Play()
    TweenService:Create(Lighting.MainColorCorrection, TweenInfo.new(5), {TintColor = Color3.fromRGB(250, 0, 0)}):Play()

    -- Get entity model and primary part
    entityModel = entity.Model
    if entityModel then
        entityPart = entityModel.PrimaryPart or entityModel:FindFirstChildWhichIsA("BasePart")
        if not entityPart then
            warn("Entity model không có PrimaryPart hoặc BasePart nào! Khóa camera và neo có thể không hoạt động.")
            -- Find any part if PrimaryPart is missing to at least allow camera lock
            for _, child in ipairs(entityModel:GetChildren()) do
                if child:IsA("BasePart") then
                    entityPart = child
                    break
                end
            end
        end
    else
        warn("entity.Model là nil sau khi spawn!")
    end

    print("Entity đã xuất hiện và di chuyển bình thường.")
end)

entity:SetCallback("OnStartMoving", function() 
    print("Thực thể đã bắt đầu di chuyển.") 
end)
entity:SetCallback("OnEnterRoom", function(room, firstTime)
    print(("Thực thể đã vào phòng: %s (%s)"):format(room.Name, firstTime and "lần đầu" or "lần nữa"))
end)
entity:SetCallback("OnLookAt", function(los)
    print(los and "Người chơi đang nhìn vào thực thể" or "Góc nhìn bị cản trở")
end)
entity:SetCallback("OnRebounding", function(start)
    print(start and "Bật lại bắt đầu" or "Bật lại kết thúc")
end)
entity:SetCallback("OnDespawning", function() 
    print("Thực thể đang biến mất") 
    -- When despawning, unanchor all parts so it can move away
    if entityModel then
        for _, part in ipairs(entityModel:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = false
            end
        end
        print("Entity đã được gỡ neo.")
    end
end)
entity:SetCallback("OnDespawned", function()
    print("Thực thể đã biến mất")

    local despawnSound = Instance.new("Sound", workspace)
    despawnSound.SoundId = "rbxassetid://1837829565"
    despawnSound.Volume = 9999
    despawnSound:Play()

    task.wait(3)

    -- Restore room color after despawn
    Lighting.MainColorCorrection.TintColor = Color3.fromRGB(250, 0, 0)
    Lighting.MainColorCorrection.Contrast = 10
    TweenService:Create(Lighting.MainColorCorrection, TweenInfo.new(2.5), {Contrast = 0}):Play()
    TweenService:Create(Lighting.MainColorCorrection, TweenInfo.new(5), {TintColor = originalTintColor}):Play() -- Restore original color
end)

entity:SetCallback("OnDamagePlayer", function(newHealth)
    print(newHealth == 0 and "Thực thể đã giết người chơi" or "Thực thể đã gây sát thương cho người chơi")
end)

--====== Real Jumpscare Logic (just the main jumpscare visuals and sounds) ======--
local function executeRealJumpscare()
    -- Block all player input (if not already blocked)
    if not inputConn1 then inputConn1 = UIS.InputBegan:Connect(function() return Enum.ContextActionResult.Sink end) end
    if not inputConn2 then inputConn2 = UIS.InputChanged:Connect(function() return Enum.ContextActionResult.Sink end) end

    -- Jumpscare Image Element (Ripper full screen image)
    local jumpscareGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
    jumpscareGui.Name = "JumpscareGUI"
    local jumpscareImg = Instance.new("ImageLabel", jumpscareGui)
    jumpscareImg.Size = UDim2.new(1, 0, 1, 0)
    jumpscareImg.BackgroundTransparency = 1
    jumpscareImg.ImageTransparency = 1
    jumpscareImg.Image = "rbxassetid://11826279208" -- Ripper Jumpscare Image
    jumpscareImg.ZIndex = 10 

    -- Play jumpscare sound
    local jumpscareSound = Instance.new("Sound", workspace)
    jumpscareSound.SoundId = "rbxassetid://6567183465" -- Jumpscare sound
    jumpscareSound.Volume = 3 
    jumpscareSound:Play()

    -- Immediately make Ripper image visible for the flash
    TweenService:Create(jumpscareImg, TweenInfo.new(0.1), {ImageTransparency = 0}):Play() 

    -- Apply color correction changes immediately, for a short duration
    Lighting.MainColorCorrection.TintColor = Color3.fromRGB(250, 0, 0) -- Deep red
    Lighting.MainColorCorrection.Contrast = 10 
    TweenService:Create(Lighting.MainColorCorrection, TweenInfo.new(0.25), {Contrast = 0}):Play() 
    TweenService:Create(Lighting.MainColorCorrection, TweenInfo.new(0.5), {TintColor = originalTintColor}):Play() -- Restore original color

    -- Wait a bit for the main jumpscare effect to play out
    task.wait(1.5) 

    -- Start displaying skull image after Ripper jumpscare completes
    jumpscareImg.ImageTransparency = 1 -- Hide Ripper image
    jumpscareImg.Image = "rbxassetid://YOUR_SKULL_IMAGE_ID_HERE" -- **REPLACE WITH YOUR SKULL IMAGE ID HERE**
    jumpscareImg.ZIndex = 12 -- Ensure it's on top of all other UI
    TweenService:Create(jumpscareImg, TweenInfo.new(0.5), {ImageTransparency = 0}):Play() -- Show skull
    
    local skullSound = Instance.new("Sound", workspace)
    skullSound.SoundId = "rbxassetid://YOUR_SKULL_SOUND_ID_HERE" -- **REPLACE WITH YOUR SKULL SOUND ID HERE**
    skullSound.Volume = 2
    skullSound:Play()

    task.wait(2) -- Duration of skull image display

    -- Cleanup
    TweenService:Create(jumpscareImg, TweenInfo.new(0.5), {ImageTransparency = 1}):Play().Completed:Wait() -- Hide skull
    
    if cameraConn then cameraConn:Disconnect() end -- Disconnect camera connection after completion
    if anchorConn then anchorConn:Disconnect() end -- Disconnect entity anchoring connection after completion
    if inputConn1 then inputConn1:Disconnect() end
    if inputConn2 then inputConn2:Disconnect() end
    camera.CameraType = Enum.CameraType.Custom -- Restore camera control
    isJumpscareActive = false
    jumpscareGui:Destroy() -- Destroy GUI
    jumpscareSound:Destroy() -- Destroy Ripper sound
    skullSound:Destroy() -- Destroy skull sound
    
    -- Restore player movement (if needed for respawn)
    local char = player.Character
    if char then
        local hum = char:FindFirstChild("Humanoid")
        if hum then
            hum.WalkSpeed = 16
            hum.JumpPower = 50
            hum.AutoRotate = true
            hum.PlatformStand = false
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = false
                end
            end
        end
    end

    -- *** IMPORTANT: Restore entity's original movement speed ***
    if entity and entity.Movement then
        entity:SetProperty("Movement", { Speed = originalMovementSpeed, Delay = entity.Movement.Delay, Reversed = entity.Movement.Reversed })
        print("Entity's movement speed restored to original.")
    end
end

--====== Intermediate Jumpscare Logic (Static Screen) - LOCK PLAYER AND ENTITY HERE ======--
local function doJumpscareWithEffect()
    if isJumpscareActive then return end
    isJumpscareActive = true

    -- Freeze player immediately
    local char = player.Character
    if char then
        local hum = char:FindFirstChild("Humanoid")
        if hum then
            hum.WalkSpeed = 0
            hum.JumpPower = 0
            hum.AutoRotate = false
            hum.PlatformStand = true
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = true 
                end
            end
        end
    end
    
    -- *** ADJUSTMENT HERE: Set entity Movement.Speed to 0.001 ***
    -- This tells the spawner to stop moving it.
    if entity and entity.Movement then
        entity:SetProperty("Movement", { Speed = 0.001, Delay = entity.Movement.Delay, Reversed = entity.Movement.Reversed })
        print("Entity's movement speed set to 0.001.")
    else
        warn("Could not set entity movement speed: entity or entity.Movement is nil.")
    end

    -- *** LOCK CAMERA TO ENTITY AS SOON AS PLAYER IS FROZEN ***
    camera.CameraType = Enum.CameraType.Scriptable
    if cameraConn then cameraConn:Disconnect() end -- Disconnect old connection if any
    cameraConn = RunService.RenderStepped:Connect(function()
        if player.Character and player.Character:FindFirstChild("Head") and entityPart and entityModel and entityModel.Parent then 
            camera.CFrame = CFrame.new(player.Character.Head.Position, entityPart.Position)
        else
            warn("Could not lock camera: entityPart, player head, or entityModel not found.")
            if cameraConn then cameraConn:Disconnect() end 
        end
    end)
    print("Camera locked to entity as soon as player is frozen.")

    -- *** START CONTINUOUSLY ANCHORING ENTITY AS SOON AS PLAYER IS FROZEN ***
    -- This is the most crucial part to ensure the entity doesn't move
    if anchorConn then anchorConn:Disconnect() end -- Disconnect old connection if any
    anchorConn = RunService.RenderStepped:Connect(function()
        if entityModel and entityModel.Parent then -- Only try to anchor if model still in workspace
            for _, part in ipairs(entityModel:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = true
                end
            end
        end
    end)
    print("Started continuously anchoring entity as soon as player is frozen.")

    -- Block input
    inputConn1 = UIS.InputBegan:Connect(function() return Enum.ContextActionResult.Sink end)
    inputConn2 = UIS.InputChanged:Connect(function() return Enum.ContextActionResult.Sink end)

    -- Static/Noise screen
    local staticGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
    staticGui.Name = "StaticGUI"
    local staticImg = Instance.new("ImageLabel", staticGui)
    staticImg.Size = UDim2.new(1, 0, 1, 0)
    staticImg.BackgroundTransparency = 1
    staticImg.ImageTransparency = 0 
    staticImg.Image = "rbxassetid://1568285513" -- Static/flicker image ID
    staticImg.ZIndex = 11 

    local staticSound = Instance.new("Sound", workspace)
    staticSound.SoundId = "rbxassetid://1845110821" -- Static sound ID
    staticSound.Volume = 1
    staticSound.Looped = true
    staticSound:Play()

    -- Darken screen
    local currentBrightness = Lighting.Brightness
    TweenService:Create(Lighting, TweenInfo.new(0.5), {Brightness = -1}):Play()
    
    task.wait(1.5) -- Duration of static screen

    -- Turn off static screen
    staticImg.ImageTransparency = 1
    staticSound:Stop()
    staticSound:Destroy()
    staticGui:Destroy()

    -- Restore brightness
    TweenService:Create(Lighting, TweenInfo.new(0.5), {Brightness = currentBrightness}):Play()

    -- Restore room color to red for the main jumpscare
    Lighting.MainColorCorrection.TintColor = Color3.fromRGB(250, 0, 0) 
    Lighting.MainColorCorrection.Contrast = 0 
    
    task.wait(0.5) -- Wait a bit for room to return to normal/red
    
    -- Then, trigger the real jumpscare (continue with Ripper image)
    executeRealJumpscare()
end


--====== Jumpscare on Death ======--
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        if healthChangedConn then
            healthChangedConn:Disconnect() -- Disconnect old connection if any
        end
        healthChangedConn = humanoid.HealthChanged:Connect(function(health)
            if health <= 0 and not isJumpscareActive then
                -- Trigger jumpscare with static effect, camera lock, and entity freeze
                doJumpscareWithEffect()
            end
        end)
    end
end

-- Connect CharacterAdded event for the current player and subsequent respawns
player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then -- If player already has a character when script runs
    onCharacterAdded(player.Character)
end

--====== Start Entity ======--
entity:Run()
