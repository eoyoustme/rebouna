-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local SoundService = game:GetService("SoundService")
local RunService = game:GetService("RunService")

-- Constants
local HASTE_INITIAL_TIME = 20    -- Thời gian bắt đầu (01:00)
local HASTE_MAX_TIME = 40        -- Thời gian tối đa (02:00)
local HASTE_SPEED = 130          -- Tốc độ đuổi bắt
local JUMPSCARE_DURATION = 0.7   -- Thời lượng hiệu ứng jumpscare

-- Asset IDs
local ASSETS = {
    JUMPSCARE_IMAGE = "11774536576",
    SCREAM_SOUND = "8628815817",
    BOOM_SOUND = "6305809364",
    HASTE_MODEL = "79420055258248",
    LEVER_MODEL = "17271863184"
}

-- Configuration
local Config = {
    hasteSpawned = false,
    leverSpawned = false,
    hasteTime = HASTE_INITIAL_TIME,
    latestRoom = nil
}

-- Local References
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait() -- Đảm bảo Character tồn tại
local MainColorCorrection = Lighting:WaitForChild("MainColorCorrection")

-- Utility Functions
local function formatTime(seconds)
    return string.format("%02d:%02d", math.floor(seconds / 60), seconds % 60)
end

local function updateTimerDisplay(label, time)
    if label then
        label.Text = formatTime(time)
    end
end

local function createSound(id, volume)
    local sound = Instance.new("Sound")
    sound.Parent = SoundService
    sound.SoundId = "rbxassetid://" .. id
    sound.Volume = volume or 1
    return sound
end

-- Core Functions
local function playJumpscare(callback)
    local gui = Instance.new("ScreenGui")
    gui.Name = "JumpscareGui"
    gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local image = Instance.new("ImageLabel")
    image.Size = UDim2.fromScale(1, 1)
    image.Position = UDim2.new()
    image.Image = "rbxassetid://" .. ASSETS.JUMPSCARE_IMAGE
    image.BackgroundTransparency = 1
    image.ZIndex = 10
    image.Parent = gui

    local scream = createSound(ASSETS.SCREAM_SOUND, 5)
    local boom = createSound(ASSETS.BOOM_SOUND, 5)
    
    -- Hiệu ứng rung màn hình
    local basePosition = image.Position
    local connection = RunService.RenderStepped:Connect(function()
        image.Position = basePosition + UDim2.fromOffset(
            math.random(-10, 10),
            math.random(-10, 10)
        )
    end)

    scream:Play()
    
    task.delay(JUMPSCARE_DURATION, function()
        boom:Play()
        wait(0.1)
        scream:Stop()
        wait(0.5)
        
        connection:Disconnect()
        gui:Destroy()
        scream:Destroy()
        boom:Destroy()
        
        if callback then callback() end
    end)
end

local function hasteAttack()
    if not Character then return end
    
    Character:SetAttribute("Stunned", true)
    
    -- Gửi gợi ý cái chết
    if ReplicatedStorage.RemotesFolder and ReplicatedStorage.RemotesFolder.DeathHint then
        -- Đảm bảo bạn có một cách để kích hoạt OnClientEvent trên client.
        -- firesignal thường dùng cho server, nếu đây là LocalScript thì cần remote event từ server.
        -- Giả sử DeathHint là RemoteEvent và bạn muốn kích hoạt nó từ client (chỉ để test hoặc giả lập)
        -- Thông thường, server sẽ gửi tín hiệu này cho client.
        -- ReplicatedStorage.RemotesFolder.DeathHint:FireClient(LocalPlayer, {
        --     "You died to who you call Haste",
        --     "He will appear after the time is over.",
        --     "Don't Hide when this happens it will not work, So the best thing to do is find a lever!"
        -- }, "Yellow")
        warn("DeathHint fired (client-side simulation, adjust for server usage if needed)")
    end
    
    playJumpscare(function()
        local humanoid = Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Health = 0
        end
    end)
end

local function spawnHaste()
    if Config.hasteSpawned then return end
    
    Config.hasteSpawned = true
    MainColorCorrection.TintColor = Color3.new(1, 0.5, 0.5) -- Thay đổi màu sắc môi trường

    -- Tải và thiết lập mô hình Haste
    local success, hasteModel = pcall(function()
        return game:GetObjects("rbxassetid://" .. ASSETS.HASTE_MODEL)[1]
    end)
    
    if not success or not hasteModel then
        warn("Không thể tải mô hình Haste")
        return
    end
    
    local rootPart = Character and Character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    hasteModel.Parent = workspace
    hasteModel.Name = "HasteMoving"
    
    -- **PHẦN ĐÃ SỬA ĐỔI QUAN TRỌNG:**
    -- Tính toán vị trí xuất hiện phía sau người chơi và hơi nhấc lên khỏi mặt đất
    local offsetDistance = 20 -- Khoảng cách (studs) phía sau người chơi
    local playerLookVector = rootPart.CFrame.LookVector -- Hướng nhìn của người chơi
    local spawnPosition = rootPart.Position - playerLookVector * offsetDistance + Vector3.new(0, 5, 0) -- Nâng 5 studs để tránh kẹt
    
    -- Đặt vị trí và hướng của Haste: xuất hiện tại spawnPosition và quay 180 độ để đối mặt với người chơi
    hasteModel:SetPrimaryPartCFrame(CFrame.new(spawnPosition) * CFrame.Angles(0, math.pi, 0))
    hasteModel.PrimaryPart.CanCollide = false -- Haste không va chạm
    hasteModel.PrimaryPart.Anchored = false   -- Haste không bị neo, cho phép nó di chuyển
    
    -- Thiết lập âm thanh
    local main = hasteModel:FindFirstChild("Main")
    if main then
        for _, soundData in pairs({
            {name = "Footsteps", speed = 0.5, volume = 2},
            {name = "ChaseSound", speed = 0.6, volume = 6.5}
        }) do
            local sound = main:FindFirstChild(soundData.name)
            if sound then
                sound.Looped = true
                sound.PlaybackSpeed = soundData.speed
                sound.Volume = soundData.volume
                sound:Play()
            end
        end
    end
    
    _G.MP = hasteModel -- Biến toàn cục để dễ debug
    task.spawn(function()
        while wait() do
            -- Đảm bảo mô hình Haste và người chơi vẫn tồn tại
            if not (hasteModel and hasteModel.Parent and Character and Character:FindFirstChild("HumanoidRootPart")) then
                break
            end
            
            local playerPos = Character:FindFirstChild("HumanoidRootPart").Position -- Vị trí người chơi hiện tại
            local hastePos = hasteModel.PrimaryPart.Position
            local direction = (playerPos - hastePos).Unit -- Hướng từ Haste đến người chơi
            local distance = (playerPos - hastePos).Magnitude -- Khoảng cách
            
            if distance > 0.5 then
                -- Di chuyển Haste về phía người chơi
                hasteModel.PrimaryPart.CFrame = hasteModel.PrimaryPart.CFrame + direction * HASTE_SPEED * math.min(distance, 1/60)
            else
                hasteAttack() -- Nếu đủ gần, tấn công
                break
            end
        end
    end)
end

local function initializeTimer(lever)
    local displayTimer = lever:FindFirstChild("DisplayTimer")
    local displayPlate = lever.Timer:FindFirstChild("DisplayPlate")
    local activatePrompt = lever:FindFirstChild("ActivateEventPrompt")
    local takeTimer = lever:FindFirstChild("TakeTimer")
    
    activatePrompt.RequiresLineOfSight = false

    if not (displayTimer and displayPlate and activatePrompt and takeTimer) then
        warn("Thiếu các thành phần cần thiết trong mô hình đòn bẩy")
        return
    end

    local timerBeep = displayPlate:FindFirstChild("TimerBeep")
    local displayLabel = displayTimer:FindFirstChild("TextLabel")
    local takeTimerLabel = takeTimer:FindFirstChild("TextLabel")

    -- Khởi tạo hiển thị
    if displayLabel then
        updateTimerDisplay(displayLabel, Config.hasteTime)
    end

    -- Vòng lặp cập nhật hẹn giờ
    local timerConnection = RunService.RenderStepped:Connect(function()
        if not (lever and lever.Parent) then
            timerConnection:Disconnect()
            return
        end

        if Config.hasteTime > 0 then
            
            Config.hasteTime = Config.hasteTime - 12 -- Giảm thời gian (giảm nhanh để thấy hiệu ứng)
            updateTimerDisplay(displayLabel, Config.hasteTime)

            if timerBeep then
                timerBeep:Play()
            end

            -- Xử lý Haste xuất hiện
            if Config.hasteTime <= 0 then
                spawnHaste()
            elseif Config.hasteSpawned and Config.hasteTime > 0 then
                -- Nếu Haste đã xuất hiện và thời gian lại tăng lên (ví dụ do kích hoạt đòn bẩy)
                -- thì xóa Haste hiện tại
                local haste = workspace:FindFirstChild("HasteMoving")
                if haste then
                    haste:Destroy()
                    Config.hasteSpawned = false
                end
            end
        end

        wait(1.5) -- Chờ 1.5 giây giữa mỗi lần cập nhật (làm cho đồng hồ chạy nhanh hơn)
    end)

    -- Xử lý kích hoạt đòn bẩy
    if activatePrompt then
        activatePrompt.Triggered:Connect(function()
            local additionalTime = tonumber(takeTimerLabel.Text) or 0
            Config.hasteTime = math.min(Config.hasteTime + additionalTime, HASTE_MAX_TIME)
            updateTimerDisplay(displayLabel, Config.hasteTime)
            
            -- Tắt nhắc nhở sau khi sử dụng
            activatePrompt.Enabled = false
            activatePrompt:Destroy()
        end)
    end
end

-- Lever Management
local function deleteLever()
    local existingLever = workspace:FindFirstChild("Haste_Lever")
    if existingLever then
        existingLever:Destroy()
        Config.leverSpawned = false
    end
end

local function spawnLeverNearDoor(door)
    if Config.leverSpawned then return end

    -- Tải mô hình đòn bẩy
    local success, leverModel = pcall(function()
        return game:GetObjects("rbxassetid://" .. ASSETS.LEVER_MODEL)[1]
    end)

    if not success or not leverModel then
        warn("Không thể tải mô hình đòn bẩy")
        return
    end

    leverModel.Name = "Haste_Lever"
    leverModel.Parent = workspace

    local lever = leverModel:FindFirstChild("Lever")
    if not lever then
        warn("Không tìm thấy thành phần Lever trong mô hình")
        leverModel:Destroy()
        return
    end

    -- Định vị đòn bẩy so với cửa
    local doorPivot = door.Door.CFrame
    local offsetCFrame = CFrame.new(3.5, 0, -1) -- Điều chỉnh vị trí tương đối
    local leverPosition = doorPivot * offsetCFrame
    lever:PivotTo(leverPosition)

    Config.leverSpawned = true
    initializeTimer(lever)
end

local function calculateLeverSpawnChance()
    if Config.hasteTime <= 0 then
        return 0.9 -- Rất cao nếu thời gian hết
    end

    -- Tỷ lệ xuất hiện đòn bẩy cao hơn khi thời gian sắp hết
    local timeRatio = math.clamp(Config.hasteTime / HASTE_MAX_TIME, 0, 1)
    return math.clamp(1 - timeRatio, 0.1, 0.7) -- Đảm bảo tối thiểu 10% và tối đa 70%
end

local function trySpawnLeverInRoom(door)
    if not door then return end

    local spawnChance = calculateLeverSpawnChance()
    if math.random() <= spawnChance then
        spawnLeverNearDoor(door)
    end
end

-- Room Management
local function handleRoomChange()
    local gameData = ReplicatedStorage:WaitForChild("GameData")
    local latestRoomValue = gameData:WaitForChild("LatestRoom").Value
    local currentRooms = workspace:WaitForChild("CurrentRooms")

    -- Kiểm tra xem phòng đã thay đổi chưa
    if latestRoomValue == Config.latestRoom then return end
    
    Config.latestRoom = latestRoomValue
    deleteLever() -- Xóa đòn bẩy cũ khi đổi phòng
    Config.leverSpawned = false -- Đặt lại trạng thái đòn bẩy

    local newRoom = currentRooms:FindFirstChild(tostring(latestRoomValue))
    if not newRoom then
        warn("Không tìm thấy phòng mới:", latestRoomValue)
        return
    end

    local door = newRoom:FindFirstChild("Door")
    if door then
        trySpawnLeverInRoom(door)
    end
end

-- Initialize
local function initialize()
    -- Thiết lập trạng thái ban đầu
    Config.hasteTime = HASTE_INITIAL_TIME
    Config.hasteSpawned = false
    Config.leverSpawned = false
    Config.latestRoom = nil

    -- Bắt đầu giám sát thay đổi phòng
    RunService.RenderStepped:Connect(handleRoomChange)
end

-- Start the system
initialize()
