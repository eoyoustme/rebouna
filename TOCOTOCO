---====== Tải Spawner ======---
local spawner = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Doors/Entity%20Spawner/V2/Source.lua"))()

---====== Các Dịch Vụ (Services) ======---
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local Debris = game:GetService("Debris")
local UserInputService = game:GetService("UserInputService")

---====== Tham Chiếu Người Chơi và Camera ======---
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Camera = workspace.CurrentCamera

---====== Biến Trạng Thái (State Variables) ======---
local entityModel -- Model "Deer god" của thực thể
local entityPart -- Part "RushNew" bên trong entityModel, dùng cho vị trí và di chuyển
local chaseConnection = nil -- Kết nối Heartbeat để đuổi theo
local destroyTimer = nil -- Timer tự hủy Deer God (Biến này sẽ được dùng cho việc hủy dựa trên cửa)
local MoveActive = true -- Biến kiểm soát việc di chuyển của Deer God
local customSpeed = 23 -- Tốc độ Deer God đuổi theo người chơi
local activationRange = 34 -- Khoảng cách kích hoạt Deer God đuổi theo
local doorStopRange = 10 -- Khoảng cách mà Deer God dừng lại khi đến gần cửa
local currentDoor = nil -- Biến để lưu trữ cửa mà Deer God đang đến gần
local isDestroyingAtDoor = false -- Biến để tránh kích hoạt lại việc hủy

-- Biến lưu trữ trạng thái ánh sáng ban đầu
local originalTintColor
local originalContrast

-- Biến cho Jumpscare
local isJumpscareActive = false
local cameraConn, inputConn1, inputConn2
local activeSounds = {}

---====== Tạo ColorCorrectionEffect nếu chưa có ======---
local colorCorrection = Lighting:FindFirstChildOfClass("ColorCorrectionEffect")
if not colorCorrection then
    colorCorrection = Instance.new("ColorCorrectionEffect")
    colorCorrection.Name = "MainColorCorrection"
    colorCorrection.Parent = Lighting
end

---====== Tạo Thực Thể (Deer God) ======---
local entity = spawner.Create({
    Entity = {
        Name = "Deer god",
        Asset = "rbxassetid://75877292391257",
        HeightOffset = 0
    },
    Lights = {
        Flicker = { Enabled = true, Duration = 5 },
        Shatter = true,
        Repair = false
    },
    Earthquake = { Enabled = false },
    CameraShake = {
        Enabled = true,
        Range = 100,
        Values = {1.5, 20, 0.1, 1}
    },
    Movement = {
        Speed = 23, -- Đặt một giá trị dương nhỏ để tránh lỗi "invalid number"
        Delay = 0,
        Reversed = false
    },
    Rebounding = { Enabled = false },
    Damage = { Enabled = true, Range = 1, Amount = 125 },
    Crucifixion = { Enabled = true, Range = 40, Resist = false, Break = true },
    Death = {
        Type = "Guiding",
        Hints = {"ME GO PLAY SKIBIDI TOILET", "GOODBYE", "STUPID YOU DIE BY A WEAK ENTITY", "HERE IS NOT FOR NOOB"},
        Cause = ""
    }
})

---====== Hàm Hỗ Trợ cho Âm Thanh Tùy Chỉnh (Tùy chọn: chỉ dùng nếu có exploit) ======---
function GitAud(soundgit, filename)
    if type(getcustomasset) == "function" or type(getsynasset) == "function" then
        writefile(filename..".mp3", game:HttpGet(soundgit))
        return (getcustomasset or getsynasset)(filename..".mp3")
    else
        warn("Không thể tải âm thanh từ GitHub: getcustomasset/getsynasset không khả dụng. Vui lòng tải âm thanh lên Roblox và sử dụng ID Asset của nó.")
        return ""
    end
end

function CustomGitSound(soundlink, vol, filename)
    local S = Instance.new("Sound")
    S.SoundId = GitAud(soundlink, filename)
    if S.SoundId == "" then return nil end
    S.Volume = vol
    S.Looped = false
    S:Play()
    Debris:AddItem(S, S.TimeLength + 1)
    return S
end

---====== Hàm Jumpscare ======---

-- Hàm này sẽ được gọi sau khi hiệu ứng nhiễu và khóa camera hoàn tất
local function executeRealJumpscare()
    if inputConn1 then inputConn1:Disconnect(); inputConn1 = nil end
    if inputConn2 then inputConn2:Disconnect(); inputConn2 = nil end

    local jumpscareGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
    jumpscareGui.Name = "JumpscareGUI"
    jumpscareGui.IgnoreGuiInset = true
    jumpscareGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local jumpscareImg = Instance.new("ImageLabel", jumpscareGui)
    jumpscareImg.Size = UDim2.new(1, 0, 1, 0)
    jumpscareImg.BackgroundTransparency = 1
    jumpscareImg.ImageTransparency = 1 -- Bắt đầu với hình ảnh trong suốt
    jumpscareImg.Image = "rbxassetid://11826279208" -- Ảnh jumpscare Deer God ban đầu
    jumpscareImg.ZIndex = 10

    local jumpscareSound = Instance.new("Sound", workspace)
    jumpscareSound.SoundId = "rbxassetid://6567183465" -- Âm thanh jumpscare đầu tiên
    jumpscareSound.Volume = 3
    jumpscareSound:Play()
    activeSounds[jumpscareSound] = true

    -- Deer God xuất hiện mờ và rõ dần (giống video)
    TweenService:Create(jumpscareImg, TweenInfo.new(0.1), {ImageTransparency = 0}):Play()
    -- Giữ cho Deer God hiển thị một lúc trước khi chuyển sang ảnh khác
    task.wait(0.5) -- Thời gian hiển thị của ảnh Deer God ban đầu

    -- Hiệu ứng màu sắc và độ tương phản khi jumpscare
    colorCorrection.TintColor = Color3.fromRGB(250, 0, 0)
    colorCorrection.Contrast = 10
    TweenService:Create(colorCorrection, TweenInfo.new(0.25), {Contrast = 0}):Play()
    TweenService:Create(colorCorrection, TweenInfo.new(0.5), {TintColor = originalTintColor}):Play() -- Màu sắc trở lại bình thường

    task.wait(1.0) -- Đợi thêm một chút trước khi chuyển ảnh, tổng thời gian ảnh Deer God khoảng 1.5s (0.5+1.0)

    -- Chuyển sang ảnh thứ hai (Hộp sọ/Khuôn mặt ghê rợn)
    jumpscareImg.ImageTransparency = 1 -- Làm mờ ảnh Deer God
    jumpscareImg.Image = "rbxassetid://12331751893" -- Ảnh hộp sọ/khuôn mặt ghê rợn
    jumpscareImg.ZIndex = 12 -- Đảm bảo ảnh này ở trên cùng

    local skullSound = Instance.new("Sound", workspace)
    skullSound.SoundId = "rbxassetid://18459521002" -- Âm thanh hộp sọ/khuôn mặt
    skullSound.Volume = 2
    skullSound:Play()
    activeSounds[skullSound] = true

    TweenService:Create(jumpscareImg, TweenInfo.new(0.3), {ImageTransparency = 0}):Play() -- Ảnh thứ hai hiện rõ dần
    task.wait(1.5) -- Thời gian hiển thị của ảnh thứ hai

    TweenService:Create(jumpscareImg, TweenInfo.new(0.5), {ImageTransparency = 1}):Play().Completed:Wait() -- Làm mờ ảnh thứ hai và đợi hoàn tất

    -- Khôi phục trạng thái camera và người chơi
    if cameraConn then cameraConn:Disconnect(); cameraConn = nil end
    Camera.CameraType = Enum.CameraType.Custom
    isJumpscareActive = false
    jumpscareGui:Destroy()

    -- Dừng và dọn dẹp tất cả các âm thanh jumpscare đang hoạt động
    for sound, _ in pairs(activeSounds) do
        if sound and sound.Playing then
            sound:Stop()
        end
        if sound and sound.Parent then
            sound:Destroy()
        end
    end
    activeSounds = {}

    local char = LocalPlayer.Character
    if char then
        local hum = char:FindFirstChild("Humanoid")
        if hum then
            hum.WalkSpeed = 16
            hum.JumpPower = 50
            hum.AutoRotate = true
            hum.PlatformStand = false
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = false
                end
            end
        end
    end
    print("Jumpscare đã kết thúc và trạng thái người chơi đã được khôi phục.")
end

-- Hàm này thiết lập môi trường cho jumpscare (khóa người chơi, camera, hiệu ứng nhiễu)
local function doJumpscareWithEffect()
    if isJumpscareActive then return end
    isJumpscareActive = true

    local char = LocalPlayer.Character
    if char then
        local hum = char:FindFirstChild("Humanoid")
        if hum then
            hum.WalkSpeed = 0
            hum.JumpPower = 0
            hum.AutoRotate = false
            hum.PlatformStand = true
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = true
                end
            end
        end
    end

    Camera.CameraType = Enum.CameraType.Scriptable
    if cameraConn then cameraConn:Disconnect() end
    cameraConn = RunService.RenderStepped:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") and entityPart and entityModel and entityModel.Parent then
            Camera.CFrame = CFrame.new(LocalPlayer.Character.Head.Position, entityPart.Position)
        else
            warn("Không thể khóa camera: entityPart, đầu người chơi hoặc entityModel không tồn tại.")
            if cameraConn then cameraConn:Disconnect() end
        end
    end)
    print("Camera đã được khóa vào entity ngay khi người chơi bị đóng băng.")

    if inputConn1 then inputConn1:Disconnect(); inputConn1 = nil end
    if inputConn2 then inputConn2:Disconnect(); inputConn2 = nil end
    inputConn1 = UserInputService.InputBegan:Connect(function() return Enum.ContextActionResult.Sink end)
    inputConn2 = UserInputService.InputChanged:Connect(function() return Enum.ContextActionResult.Sink end)

    local staticGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
    staticGui.Name = "StaticGUI"
    local staticImg = Instance.new("ImageLabel", staticGui)
    staticImg.Size = UDim2.new(1, 0, 1, 0)
    staticImg.BackgroundTransparency = 1
    staticImg.ImageTransparency = 0 -- Ảnh nhiễu hiện ngay lập tức
    staticImg.Image = "rbxassetid://1568285513" -- Ảnh nhiễu static
    staticImg.ZIndex = 11

    local staticSound = Instance.new("Sound", workspace)
    staticSound.SoundId = "rbxassetid://1845110821" -- Âm thanh nhiễu static
    staticSound.Volume = 1
    staticSound.Looped = true
    staticSound:Play()
    activeSounds[staticSound] = true

    local currentBrightness = Lighting.Brightness
    TweenService:Create(Lighting, TweenInfo.new(0.5), {Brightness = -1}):Play() -- Giảm độ sáng

    task.wait(1.5) -- Thời gian hiển thị hiệu ứng nhiễu và âm thanh nhiễu

    -- Kết thúc hiệu ứng nhiễu
    staticImg.ImageTransparency = 1 -- Làm mờ ảnh nhiễu
    if staticSound and staticSound.Playing then staticSound:Stop() end
    staticSound:Destroy()
    staticGui:Destroy()

    TweenService:Create(Lighting, TweenInfo.new(0.5), {Brightness = currentBrightness}):Play() -- Khôi phục độ sáng

    -- Hiệu ứng màu sắc ban đầu trước khi jumpscare chính thức
    colorCorrection.TintColor = Color3.fromRGB(250, 0, 0)
    colorCorrection.Contrast = 0

    task.wait(0.5) -- Đợi một chút trước khi gọi jumpscare chính thức

    executeRealJumpscare() -- Gọi jumpscare chính thức sau khi hiệu ứng nhiễu kết thúc
end

---====== Hàm Phát Hiện Cửa và Hủy Deer God ======---
local function DoorDetection()
    if not entityModel or not entityModel.PrimaryPart or not MoveActive or isDestroyingAtDoor then return end

    -- **Đây là nơi bạn cần điều chỉnh để tìm các đối tượng cửa của mình.**
    -- Ví dụ: Nếu cửa của bạn nằm trong thư mục 'workspace.Rooms.Room1.Door'
    -- Bạn sẽ cần một vòng lặp hoặc cách để lấy tất cả các cửa trong game.
    -- Để đơn giản hóa, tôi giả định có một Part tên là "DoorPart" trong Workspace.
    -- Bạn CẦN thay đổi dòng này để phù hợp với cấu trúc game của bạn!
    local doors = {} -- Một bảng để chứa tất cả các phần cửa
    for _, obj in ipairs(workspace:GetDescendants()) do
        -- Ví dụ: Nếu cửa của bạn có tên "Door" hoặc là một phần của Model tên "Doors"
        if obj:IsA("BasePart") and obj.Name:find("Door") and obj.Parent ~= entityModel then
            table.insert(doors, obj)
        end
        -- Hoặc nếu bạn có một thư mục chứa tất cả các cửa, ví dụ: workspace.GameDoors
        -- if obj:IsA("BasePart") and obj.Parent and obj.Parent.Name == "GameDoors" then
        --     table.insert(doors, obj)
        -- end
    end

    local closestDoor = nil
    local minDistanceToDoor = math.huge

    for _, doorPart in ipairs(doors) do
        local distanceToDoor = (entityModel.PrimaryPart.Position - doorPart.Position).Magnitude
        if distanceToDoor < minDistanceToDoor then
            minDistanceToDoor = distanceToDoor
            closestDoor = doorPart
        end
    end

    if closestDoor and minDistanceToDoor <= doorStopRange then
        if currentDoor ~= closestDoor then
            print("Deer God đã đến gần cửa: " .. closestDoor.Name .. ". Dừng di chuyển và bắt đầu đếm ngược hủy.")
            currentDoor = closestDoor
            MoveActive = false -- Dừng di chuyển
            isDestroyingAtDoor = true

            if chaseConnection then
                chaseConnection:Disconnect()
                chaseConnection = nil
            end

            if destroyTimer then task.cancel(destroyTimer) end
            destroyTimer = task.delay(1.2, function() -- Đợi 1.2 giây
                if entityModel and entityModel.PrimaryPart then
                    print("Deer God tự hủy sau khi đến cửa.")
                    entityModel:SetPrimaryPartCFrame(entityModel.PrimaryPart.CFrame * CFrame.new(0, -100, 0)) -- Di chuyển xuống dưới đất
                end
                task.wait(0.5) -- Đợi một chút để model di chuyển xuống
                entity:Despawn() -- Hủy thực thể
                isDestroyingAtDoor = false
                currentDoor = nil
            end)
        end
    elseif currentDoor then
        -- Nếu Deer God đã rời xa cửa mà nó đang đếm ngược để hủy
        print("Deer God đã rời xa cửa. Hủy bỏ đếm ngược hủy cửa.")
        if destroyTimer then
            task.cancel(destroyTimer)
            destroyTimer = nil
        end
        MoveActive = true -- Cho phép di chuyển lại
        currentDoor = nil
        isDestroyingAtDoor = false
    end
end


---====== Callbacks của Thực Thể ======---

entity:SetCallback("OnSpawned", function()
    print("Thực thể đã xuất hiện (spawn)")
    entityModel = entity.Model
    entityModel.Parent = workspace

    if entityModel then
        entityPart = entityModel:FindFirstChild("RushNew")
        if not entityPart then
            warn("Model Deer God KHÔNG chứa part có tên 'RushNew'!")
            entityPart = entityModel.PrimaryPart or entityModel:FindFirstChildOfClass("BasePart")
            if not entityPart then
                warn("Không tìm thấy 'RushNew' hoặc bất kỳ BasePart nào phù hợp cho Deer God! Thực thể có thể không di chuyển đúng.")
                return
            end
        end
        entityModel.PrimaryPart = entityPart
        print("DeerGod.PrimaryPart đã được đặt thành: " .. entityModel.PrimaryPart.Name)
    end

    coroutine.wrap(function()
        for i, v in ipairs(entityModel:GetDescendants()) do
            if v.Name == "RushNew" then
                pcall(function()
                    if v:FindFirstChild("Breathing") then v.Breathing:Destroy() end
                end)
                pcall(function()
                    if v:FindFirstChild("Footsteps") then v.Footsteps:Destroy() end
                end)
            end
        end
    end)()

    local customSoundInstance = CustomGitSound("https://github.com/Tinkgy111/Bang/blob/main/followed.mp3?raw=true", 2, "DeerGod_Hostile")
    if customSoundInstance then
        customSoundInstance.Parent = entityModel
    end

    originalTintColor = colorCorrection.TintColor
    originalContrast = colorCorrection.Contrast

    colorCorrection.TintColor = Color3.fromRGB(255, 255, 255)
    colorCorrection.Contrast = 10
    TweenService:Create(colorCorrection, TweenInfo.new(2.5), {Contrast = 0}):Play()
    TweenService:Create(colorCorrection, TweenInfo.new(5), {TintColor = Color3.fromRGB(250, 0, 0)}):Play()

    MoveActive = true
    isDestroyingAtDoor = false -- Đảm bảo reset trạng thái khi spawn
    currentDoor = nil

    if chaseConnection then chaseConnection:Disconnect() end
    chaseConnection = RunService.Heartbeat:Connect(function(dt)
        if not MoveActive or not entityModel or not entityModel.PrimaryPart or not HumanoidRootPart or not HumanoidRootPart.Parent then return end
        
        -- Gọi hàm kiểm tra cửa trong mỗi frame Heartbeat
        DoorDetection()

        if MoveActive then -- Chỉ di chuyển nếu MoveActive là true
            local pos = entityModel.PrimaryPart.Position
            local target = HumanoidRootPart.Position
            local distance = (target - pos).Magnitude

            if distance <= activationRange then -- Chỉ đuổi theo nếu trong phạm vi kích hoạt
                local dir = (target - pos).Unit
                local moveVec = dir * customSpeed * dt
                local newCFrame = CFrame.new(pos + moveVec, target)
                entityModel:SetPrimaryPartCFrame(newCFrame)
            end
        end
    end)

    local spawnedRushNew = entityModel:FindFirstChild("RushNew")
    if spawnedRushNew then
        spawnedRushNew.Touched:Connect(function(hit)
            local h = hit.Parent and hit.Parent:FindFirstChild("Humanoid")
            if h and hit:IsDescendantOf(Character) then
                h:TakeDamage(10)
                local stats = game:GetService("ReplicatedStorage").GameStats
                if stats:FindFirstChild("Player_"..LocalPlayer.Name) then
                    stats["Player_"..LocalPlayer.Name].Total.DeathCause.Value = "Deer God"
                end
            end
        })
    else
        warn("Model Deer God vừa spawn không chứa 'RushNew' cho sự kiện Touched!")
    end
end)

entity:SetCallback("OnStartMoving", function()
    print("Thực thể đã bắt đầu di chuyển (Lưu ý: Di chuyển được kiểm soát bởi Heartbeat, không phải logic mặc định của spawner).")
end)

entity:SetCallback("OnEnterRoom", function(room, firstTime)
    if firstTime then
        print("Thực thể đã vào phòng: ".. room.Name.. " lần đầu tiên")
    else
        print("Thực thể đã vào phòng: ".. room.Name.. " lần nữa")
    end
end)

entity:SetCallback("OnLookAt", function(lineOfSight)
    if lineOfSight then
        print("Người chơi đang nhìn vào thực thể")
    else
        print("Góc nhìn của người chơi bị cản trở bởi vật gì đó")
    end
end)

entity:SetCallback("OnRebounding", function(startOfRebound)
    if startOfRebound then
        print("Thực thể đã bắt đầu phản lực")
    else
        print("Thực thể đã kết thúc phản lực")
    end
end)

entity:SetCallback("OnDespawning", function()
    print("Thực thể đang biến mất (despawning)")
    if chaseConnection then
        chaseConnection:Disconnect()
        chaseConnection = nil
    end
    if destroyTimer then
        task.cancel(destroyTimer)
        destroyTimer = nil
    end

    TweenService:Create(colorCorrection, TweenInfo.new(2.5), {Contrast = originalContrast}):Play()
    TweenService:Create(colorCorrection, TweenInfo.new(5), {TintColor = originalTintColor}):Play()

    if entityModel then
        for _, part in ipairs(entityModel:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = false
            end
        end
        print("Thực thể đã được bỏ neo trước khi biến mất.")
    end
    isDestroyingAtDoor = false -- Reset trạng thái hủy khi thực thể biến mất
    currentDoor = nil
end)

entity:SetCallback("OnDespawned", function()
    print("Thực thể đã biến mất (despawned)")
    local cue2 = Instance.new("Sound")
    cue2.Parent = game.Workspace
    cue2.Name = "Spawn"
    cue2.SoundId = "rbxassetid://000000" -- Hãy thay đổi ID âm thanh này nếu bạn muốn một âm thanh đặc biệt
    cue2.Volume = 9999
    cue2.PlaybackSpeed = 1
    cue2:Play()
    Debris:AddItem(cue2, cue2.TimeLength + 1)
    task.wait(3)
end)

entity:SetCallback("OnDamagePlayer", function(newHealth)
    if newHealth == 0 then
        print("Thực thể đã giết người chơi - Bắt đầu Jumpscare")
        doJumpscareWithEffect()
    else
        print("Thực thể đã gây sát thương cho người chơi")
    end
end)

LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    HumanoidRootPart = char:WaitForChild("HumanoidRootPart")
end)

---====== Chạy Thực Thể ======---
entity:Run()
